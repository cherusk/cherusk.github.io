<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>cherusk Tech Blog - cherusk</title><link>https://cherusk.github.io/</link><description></description><lastBuildDate>Tue, 18 Sep 2018 13:29:00 +0000</lastBuildDate><item><title>ss2 - Socket Statistics 2 (pyroute2)</title><link>https://cherusk.github.io/ss2-socket-statistics-2-pyroute2.html</link><description>&lt;h2&gt;Gist&lt;/h2&gt;
&lt;p&gt;Disseminating a complementary and viably a more modern alternative to the established &lt;strong&gt;ss&lt;/strong&gt; utility shipped with the well-known &lt;strong&gt;iproute&lt;/strong&gt; package.&lt;/p&gt;
&lt;h4&gt;How to attain ss2?&lt;/h4&gt;
&lt;p&gt;It's part of the &lt;a href="https://github.com/svinota/pyroute2"&gt;pyroute2 package install routines&lt;/a&gt;, so please follow those upstream to allow me to reduce redundancy in this regard.&lt;/p&gt;
&lt;h4&gt;Example Run&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;ss2 …&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">cherusk</dc:creator><pubDate>Tue, 18 Sep 2018 13:29:00 +0000</pubDate><guid isPermaLink="false">tag:cherusk.github.io,2018-09-18:/ss2-socket-statistics-2-pyroute2.html</guid><category>automation</category><category>flows</category><category>json</category><category>kernel</category><category>linux</category><category>linux engineering</category><category>machine readable</category><category>metrics</category><category>network stack</category><category>python</category><category>socket</category><category>statistics</category><category>tcp flows</category><category>tcp/ip</category><category>tool</category><category>utility</category></item><item><title>Light as Air - Towards an Airborne, Speed of Light Internet backbone</title><link>https://cherusk.github.io/speed-of-light-in-the-air-towards-an-airborne-internet-backbone.html</link><description>&lt;h1&gt;Abstract&lt;/h1&gt;
&lt;p&gt;There is increasing movement in the Internet backbone siblings creation movement globally. That's foremost the case for special domains like the armament sector or the space flight industries, because those are in pressing need for such facilities in order to fulfill their missions. In line with that, airships have …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">cherusk</dc:creator><pubDate>Tue, 26 Dec 2017 22:52:00 +0000</pubDate><guid isPermaLink="false">tag:cherusk.github.io,2017-12-26:/speed-of-light-in-the-air-towards-an-airborne-internet-backbone.html</guid><category>airborne internet backbone</category><category>airborne networking</category><category>airship</category><category>atmospheric mitigation techniques</category><category>backbone internet</category><category>c-ISP</category><category>cable to sky</category><category>fibre backbone</category><category>FSO links</category><category>future backbones</category><category>global backbone network</category><category>HAP</category><category>high altitude platform</category><category>internet engineering</category><category>laser communication</category><category>optics</category><category>radio links</category><category>research</category><category>satellites</category><category>space-to-earth-link</category><category>speed of light</category><category>theory</category><category>up/down link</category><category>wan networks</category><category>wireless</category></item><item><title>Linux TCP - window scaling quantification | rmem,wmem</title><link>https://cherusk.github.io/linux-tcp-window-scaling-quantification-rmemwmem.html</link><description>&lt;h1&gt;Drive behind introspection&lt;/h1&gt;
&lt;p&gt;First, a researcher's curiosity what is the actual plasticity of this setting and further the urge for complementing rather incomplete, technical statements made around this topic findable everywhere.&lt;/p&gt;
&lt;h1&gt;Testbed outline&lt;/h1&gt;
&lt;p&gt;All virtual, KVM or LXC based,  with a  most recent fedora26 (&lt;strong&gt;kernel 4.11&lt;/strong&gt;) as VMs that …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">cherusk</dc:creator><pubDate>Thu, 24 Aug 2017 11:49:00 +0000</pubDate><guid isPermaLink="false">tag:cherusk.github.io,2017-08-24:/linux-tcp-window-scaling-quantification-rmemwmem.html</guid><category>bottle-neck</category><category>congestion control</category><category>core emulator</category><category>data series</category><category>explanation</category><category>flent</category><category>hint</category><category>interpretation</category><category>linux</category><category>network stack</category><category>research</category><category>scaling</category><category>tcp</category><category>tcp flows</category><category>tcp rmem</category><category>tcp wmem</category><category>testbed</category><category>transeive window scaling</category><category>Tuning</category></item><item><title>Fleutan - and operational FLUIDITY</title><link>https://cherusk.github.io/fleutan-and-operational-fluidity.html</link><description>&lt;h1&gt;&lt;a href="https://github.com/cherusk/fleutan"&gt;Influence on GitHub&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img alt="logo" class="alignnone size-full wp-image-2340" height="1183" src="https://cherusk.github.io/2017/08/logo.png" width="1400"&gt;&lt;/p&gt;
&lt;h2&gt;Notion&lt;/h2&gt;
&lt;p&gt;What is Fleutan? It's meant as a general tooling suite around all sort of flowing connected apparitions on unixoid systems (especially linux). Though, it's far from complete and should meanwhile rather been seen as a first illustrating radicales to show the desire for standardized open meta …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">cherusk</dc:creator><pubDate>Sat, 19 Aug 2017 10:11:00 +0000</pubDate><guid isPermaLink="false">tag:cherusk.github.io,2017-08-19:/fleutan-and-operational-fluidity.html</guid><category>analysis</category><category>bandwith product</category><category>bcc</category><category>correlation</category><category>cwnd</category><category>ebpf</category><category>flow grouping</category><category>flowing</category><category>flowing engineering</category><category>introspection</category><category>kernel</category><category>linux</category><category>linux engineering</category><category>mechanism</category><category>net traversal</category><category>network paths</category><category>network stack</category><category>networking</category><category>operations</category><category>perf</category><category>performance</category><category>python</category><category>qdisc</category><category>research</category><category>resource usage</category><category>ss</category><category>stack config</category><category>statistics</category><category>suite</category><category>system operations</category><category>tcp</category><category>tcp flows</category><category>tcp/ip</category><category>tool</category><category>traffic flows</category><category>traffic volume</category><category>trouble shooting</category><category>Tuning</category><category>user land</category></item><item><title>Monitoring and Tuning the Linux Networking Stack: Egress (TX)</title><link>https://cherusk.github.io/monitoring-and-tuning-the-linux-networking-stack-egress-tx.html</link><description>&lt;h1&gt;&lt;a href="https://github.com/cherusk/kannjan/blob/master/linux_ns_egress"&gt;Edit on Github&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#TL;DR"&gt;TL;DR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Approach"&gt;Approach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#traversal%20starting"&gt;TX skb traversal starting&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#Higher%20Layer"&gt;Higher Layer&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#TCP%20egress%20skeleton"&gt;TCP egress skeleton&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#"&gt;sending focal point: tcp_sendmsg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tcp_write_xmit%20and%20tcp_transmit_skb"&gt;tcp_write_xmit and tcp_transmit_skb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#IP%20code%20paths"&gt;IP code paths&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ip_queue_xmit"&gt;ip_queue_xmit&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;coming data from TCP&lt;/li&gt;
&lt;li&gt;routing subsystem incurred costs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#ip_local_out"&gt;ip_local_out&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#common%20tx%20sink%20for%20further%20protocols%20(like%20UDP)"&gt;common tx sink for further protocols (like UDP)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#__ip_local_out"&gt;__ip_local_out&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;first netfilter hurdle&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#ip_output"&gt;ip_output&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;dst_output&lt;/li&gt;
&lt;li&gt;second …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">cherusk</dc:creator><pubDate>Sun, 25 Dec 2016 19:59:00 +0000</pubDate><guid isPermaLink="false">tag:cherusk.github.io,2016-12-25:/monitoring-and-tuning-the-linux-networking-stack-egress-tx.html</guid><category>driver</category><category>driver queues</category><category>egress</category><category>ethtool</category><category>kernel</category><category>linux</category><category>Monitoring</category><category>msi</category><category>multi queueing</category><category>NAPI</category><category>network stack</category><category>networking</category><category>nic</category><category>performance</category><category>qdisc</category><category>queueing</category><category>queues</category><category>queuing discipline</category><category>sending</category><category>skb</category><category>softirq</category><category>stack traversal</category><category>tc</category><category>Traffic Control</category><category>transmission</category><category>transmit packet steering</category><category>transmitting</category><category>Tuning</category><category>TX</category><category>XPS</category></item><item><title>rsync or cp over net based file systems</title><link>https://cherusk.github.io/rsync-or-cp-over-net-based-file-systems.html</link><description>&lt;h1&gt;Question&lt;/h1&gt;
&lt;p&gt;Skimming the net with all thinkable efforts I could find some passionately led discussions and interesting articles about cp and rsync performance comparisons. Foremost &lt;a href="https://lwn.net/Articles/400489/"&gt;LWN-CP-RSYNC&lt;/a&gt; raised my attention for it promising in a technically perfect manner a more than doubling of throughput when opting for coreutils' cp in default …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">cherusk</dc:creator><pubDate>Tue, 16 Aug 2016 01:00:00 +0000</pubDate><guid isPermaLink="false">tag:cherusk.github.io,2016-08-16:/rsync-or-cp-over-net-based-file-systems.html</guid><category>comparison</category><category>cp</category><category>data migration</category><category>genbackupdata</category><category>ibvirt</category><category>KVM/Qemu</category><category>linux</category><category>networking</category><category>nfs</category><category>performance</category><category>rsync</category><category>virt-builder</category><category>vs</category></item></channel></rss>